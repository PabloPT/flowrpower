<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - geometry - earth</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #808080;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				background-color: #ffffff;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}
			a {
				color: #0080ff;
			}
		</style>
	</head>
	<body>
        <div id="container"></div>

		<script src="https://threejs.org/build/three.js"></script>
		<script src="https://threejs.org/examples/js/renderers/Projector.js"></script>
		<script src="https://threejs.org/examples/js/renderers/CanvasRenderer.js"></script>
        <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
		<script>
			var container;
			var camera, scene, renderer, controls;
			var group;
			var mouseX = 0, mouseY = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			init();
			animate();
            render();

			function init() {
				container = document.getElementById( 'container' );
				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 2000 );

                //mouse rotate
                controls = new THREE.OrbitControls( camera );
                controls.target.set( 0, 0, 0 )
                controls.rotateSpeed = 0.1;
                controls.zoomSpeed = 1.2;
                controls.panSpeed = 2.8;
                controls.enableZoom = true;
                controls.enablePan = true;
                //controls.noRotate = true;
                controls.enableDamping = true;
                controls.dampingFactor = 0.3;
                controls.keys = [ 65, 83, 68 ];

				camera.position.z = 500;
				
				scene = new THREE.Scene();
				group = new THREE.Group();
				scene.add( group );
				// earth
				var loader = new THREE.TextureLoader();
				//loader.load( 'https://threejs.org/examples/textures/land_ocean_ice_cloud_2048.jpg', function ( texture ) {
				loader.load( 'land_shallow_topo_2048.png', function ( texture ) {
					var geometry = new THREE.SphereGeometry( 200, 20, 20 );
					var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );
					var mesh = new THREE.Mesh( geometry, material );
					group.add( mesh );

					var myMarker = getMapMarker(canvas, 59.328220, 18.016351, mesh);
					group.add(myMarker);
				} );
				// shadow
				var canvas = document.createElement( 'canvas' );
				canvas.width = 128;
				canvas.height = 128;
				var context = canvas.getContext( '2d' );
				var gradient = context.createRadialGradient(
					canvas.width / 2,
					canvas.height / 2,
					0,
					canvas.width / 2,
					canvas.height / 2,
					canvas.width / 2
				);
				gradient.addColorStop( 0.1, 'rgba(210,210,210,1)' );
				gradient.addColorStop( 1, 'rgba(255,255,255,1)' );
				context.fillStyle = gradient;
				context.fillRect( 0, 0, canvas.width, canvas.height );
				var texture = new THREE.CanvasTexture( canvas );
				var geometry = new THREE.PlaneBufferGeometry( 300, 300, 3, 3 );
				var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );
				var mesh = new THREE.Mesh( geometry, material );
				mesh.position.y = - 250;
				mesh.rotation.x = - Math.PI / 2;
				group.add( mesh );
				renderer = new THREE.CanvasRenderer();
				renderer.setClearColor( 0xffffff );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
			}

			function getMapMarker(canvas, lat, lng, groupMainObject){

				var x = 0, y = 0;

				var heartShape = new THREE.Shape();

				heartShape.moveTo( x + 5, y + 5 );
				heartShape.bezierCurveTo( x + 5, y + 5, x + 4, y, x, y );
				heartShape.bezierCurveTo( x - 6, y, x - 6, y + 7,x - 6, y + 7 );
				heartShape.bezierCurveTo( x - 6, y + 11, x - 3, y + 15.4, x + 5, y + 19 );
				heartShape.bezierCurveTo( x + 12, y + 15.4, x + 16, y + 11, x + 16, y + 7 );
				heartShape.bezierCurveTo( x + 16, y + 7, x + 16, y, x + 10, y );
				heartShape.bezierCurveTo( x + 7, y, x + 5, y + 5, x + 5, y + 5 );
				
				var geometry = new THREE.ShapeBufferGeometry( heartShape );
				var material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );
				var mesh = new THREE.Mesh( geometry, material ) ;

				mesh = setMarkerPosition(lat, lng, mesh, groupMainObject);

				return mesh;
			}

			function setMarkerPosition(lat, lng, mapMarker, groupMainObject) {
				lng = lng + 180;
				lng = lng > 180 ? lng - 360 : lng;
				
				var phi = (90 - lat) * Math.PI / 180;
				var theta = (180 - lng) * Math.PI / 180;

				mapMarker.position.x = 205.0 * Math.sin(phi) * Math.cos(theta);
				mapMarker.position.y = 205.0 * Math.cos(phi);
				mapMarker.position.z = 205.0 * Math.sin(phi) * Math.sin(theta);

				//mapMarker.lookAt(groupMainObject.position);

				mapMarker.updateMatrix();
				return mapMarker;
			}

            function render() {
				requestAnimationFrame( render );
				renderer.render( scene, camera );
			}

			function animate() {
				requestAnimationFrame( animate );
				controls.update();
			}
		</script>

	</body>
</html>