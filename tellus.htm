<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - geometry - earth</title>
		<meta charset="utf-8">
	    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <link href="site.css" type="text/css" rel="stylesheet" />
        <style type="text/css">
            BODY
            {
                
            }
            canvas
            {
                width: 100%;
                height: 100%;
            }
        </style>
	</head>
<body>
    <div class="divInfoContainer">
        <img src="https://images1.ving.se/images/SiteID1/SiteLayout/ving_header_logo_small.png?v=1" width="250" />
        
        <div class="hotel-products">
            <input type="radio" onchange="changeHotelProduct()" checked="checked" value="sunwing" name="hotelProduct" /> Sunwing<br/>
            <input type="radio" onchange="changeHotelProduct()" value="sunprime" name="hotelProduct" /> Sunprime<br/>
            <input type="radio" onchange="changeHotelProduct()" value="sungarden" name="hotelProduct" /> Sungarden
        </div>
        <div id="divInfoContent" class="divInfoContent">
            <div id="divHotelName" class="hotel-name">

            </div>
            <div id="divHotelDescription" class="hotel-description">

            </div>
        </div>
    </div>
<div id="container"></div>

<script src="https://threejs.org/build/three.js"></script>
<script src="https://threejs.org/examples/js/loaders/STLLoader.js"></script>
<script src="https://threejs.org/examples/js/renderers/Projector.js"></script>
<script src="https://threejs.org/examples/js/renderers/CanvasRenderer.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="lolloandbernie.js"></script>
<script src="gethotels.js"></script>
<script>
    var hotelColor = 0xfcb40c, highlightColor = 0xff5500;
    var hotelMeshes = [];
    var hotelMeshArray = [];
    var container;
    var camera, scene, renderer, controls, raycaster;
    var mouse = new THREE.Vector2();
    var INTERSECTED;//an intersected object
    var group;
    var mouseX = 0, mouseY = 0;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;

    var sphereRadius = 200;
    var cameraRadius = 500;
    var tellusMesh;

    var loader;
    var renderFuncs = [];

    init();
    animate();
    render();

    function changeHotelProduct(){
        var selected = $('input[name=hotelProduct]:checked').val();
        getHotels(selected, populateHotelMarker);
    }

    function populateHotelMarker(hotel) {
                    getMapMarker(hotel.location.latitude,
                        hotel.location.longitude,
                        tellusMesh,
                        function(myMarker) {
                            group.add(myMarker);
                            // Check for overlapping pins.
                            var tightSpot = false;
                            for (var hotelIndex in hotelMeshes) {
                                var compareFunction = function(position1, position2) {
                                    return position1.x + 0.2 > position2.x &&
                                        position1.x - 0.2 < position2.x &&
                                        position1.y + 0.2 > position2.y &&
                                        position1.y - 0.2 < position2.y &&
                                        position1.z + 0.2 > position2.z &&
                                        position1.z - 0.2 < position2.z;
                                };
                                if (compareFunction(hotelMeshes[hotelIndex].mesh.position, myMarker.position)) {
                                    tightSpot = true;
                                    myMarker.rotation.x -= 0.2;
                                    myMarker.rotation.y += 0.2;
                                    if (!hotelMeshes[hotelIndex].tightSpot) {
                                        hotelMeshes[hotelIndex].mesh.rotation.x += 0.1;
                                        hotelMeshes[hotelIndex].mesh.rotation.y += 0.2;
                                        hotelMeshes[hotelIndex].tightSpot = true;
                                    }
                                }
                            }
                            hotelMeshes.push({ mesh: myMarker, tightSpot: tightSpot });
                            myMarker.children[0].hotel = hotel;
                            hotelMeshArray.push(myMarker.children[0]);
                        });
                }

    function init() {
        container = document.getElementById('container');
        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 2000);
        scene = new THREE.Scene();

        //mouse rotate
        controls = new THREE.OrbitControls(camera);
        controls.target.set(0, 0, 0);
        controls.rotateSpeed = 0.1;
        controls.zoomSpeed = 1.2;
        controls.panSpeed = 2.8;
        controls.enableZoom = true;
        controls.enablePan = true;
        controls.enableDamping = true;
        controls.dampingFactor = 0.3;
        controls.keys = [65, 83, 68];

        setupAtmosphere();

        setPositionFromLatLongAndRadius(59.328220, 18.016351, cameraRadius, camera.position);
        
        //addGlobePointLights();
        var ambientLight = new THREE.AmbientLight( 0xffac62, 0.2 ); // soft white light
        scene.add( ambientLight );

       
        group = new THREE.Group();
        scene.add(group);
        // earth
        loader = new THREE.TextureLoader();
        loader.load('earth.png',
            function(texture) {
                var geometry = new THREE.SphereGeometry(sphereRadius, 40, 40);
                geometry.center();
                var material = new THREE.MeshPhongMaterial({ map: texture, overdraw: 0.5, shininess: 0.6 });
                tellusMesh =  new THREE.Mesh(geometry, material);
                group.add(tellusMesh);
                getHotels("sunwing", populateHotelMarker);
            });

        renderer = new THREE.WebGLRenderer({  alpha: true });
        /*renderer.setClearColor(0x000000);*/
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        container.appendChild(renderer.domElement);
        raycaster = new THREE.Raycaster();
        document.addEventListener('mousemove', onDocumentMouseMove, false);

        document.addEventListener('click', onClick, false);
    }

    function setupAtmosphere() {
        // LIGHTS
        var frontLight = new THREE.PointLight(0xffbc47, 0.7);
        frontLight.position.z = 400;
        var leftSideLight = new THREE.PointLight(0x00f6ff, 0.9);
        leftSideLight.position.x = -400;
        leftSideLight.position.y = 100;
        leftSideLight.position.z = 300;
        var leftSideLight2 = new THREE.PointLight(0x00f6ff, 0.5);
        leftSideLight2.position.x = -400;
        leftSideLight2.position.y = -100;
        leftSideLight2.position.z = 300;
        var rightSideLight = new THREE.PointLight(0x00f6ff, 0.5);
        rightSideLight.position.x = 300;
        rightSideLight.position.y = 200;
        var rightSideLight2 = new THREE.PointLight(0x00f6ff, 0.5);
        rightSideLight2.position.x = 300;
        rightSideLight2.position.y = 0;
        var sunLight = new THREE.PointLight(0xff2a00, 1.0);
        sunLight.position.y = 300;
        sunLight.position.z = 300;
        var bottomDarkLigth = new THREE.PointLight(0x5e5e5e, 0.5);
        bottomDarkLigth.position.y = -400;
        bottomDarkLigth.position.z = 200;
        // HALO
        var haloMaterial = new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'halo.png' ), transparent: true, opacity: 1.0 });
        var haloMesh = new THREE.Mesh(new THREE.PlaneGeometry(700, 700), haloMaterial);
        haloMesh.position.z = 50;

        // Lollo & Bernie
        var lolloAndBernieManager = new lolloAndBernie(THREE);
        lolloAndBernieManager.mesh.position.y = 212;
        lolloAndBernieManager.mesh.position.z = 55;
        lolloAndBernieManager.mesh.scale.set(0.25, 0.25, 0.25);
        var lolloAndBernie3dObject = new THREE.Object3D();
        lolloAndBernie3dObject.add(lolloAndBernieManager.mesh);
        lolloAndBernie3dObject.rotation.z = -0.1;
        
        // Create control object.
        var atmosphere3dObject = new THREE.Object3D();
        atmosphere3dObject.add(haloMesh);
        atmosphere3dObject.add(frontLight);
        atmosphere3dObject.add(bottomDarkLigth);
        atmosphere3dObject.add(sunLight);
        atmosphere3dObject.add(leftSideLight);
        atmosphere3dObject.add(leftSideLight2);
        atmosphere3dObject.add(rightSideLight);
        atmosphere3dObject.add(rightSideLight2);
        atmosphere3dObject.add(lolloAndBernie3dObject);
        scene.add(atmosphere3dObject);
        
        // Add animation func.
        renderFuncs.push(function() {
            atmosphere3dObject.lookAt(camera.position);
            lolloAndBernieManager.animate();
        });
    };

    function addGlobePointLights(){
        var pointLight1 = new THREE.PointLight( 0xffffff, 7, 300 );
        setPositionFromLatLongAndRadius(45, -45, 400, pointLight1.position);
        scene.add(pointLight1);
        var pointLight2 = new THREE.PointLight( 0xffffff, 7, 300 );
        setPositionFromLatLongAndRadius(-20, 90, 400, pointLight2.position);
        scene.add(pointLight2);
    }

    function addMarkerPointLight( lat, lng ){
        var pointLight = new THREE.PointLight( 0x00cccc, 5, 8.5 );
        setPositionFromLatLongAndRadius(lat, lng, sphereRadius+5, pointLight.position);
        scene.add(pointLight);
    }

    function getMapMarker(lat, lng, groupMainObject, callBack) {
        var x = 0, y = 0;

        var material = new THREE.MeshLambertMaterial({ color: hotelColor });
        var loader = new THREE.STLLoader();
        loader.load("heart.stl",
            function(geometry) {
                
                geometry.center();
                var mesh = new THREE.Mesh(geometry, material);

                var rotMat = new THREE.Matrix4().makeRotationX(Math.PI/2*-1);
				geometry.applyMatrix(rotMat);
                mesh.position.z = -4.5;
                var pivot = new THREE.Object3D(); // Blir rotationspunkten för nålen. Sitter på nolspetsen vilket gör att man kan luta nålen.
                pivot.add(mesh);
                pivot = setMarkerPosition(lat, lng, pivot, groupMainObject, sphereRadius);

                addMarkerPointLight( lat, lng  );

                callBack(pivot);
            });
    }

    function setMarkerPosition(lat, lng, mapMarker, groupMainObject, pointRadius) {

        setPositionFromLatLongAndRadius(lat, lng, pointRadius, mapMarker.position);
        mapMarker.lookAt(tellusMesh.position);
        mapMarker.updateMatrix();
        
        return mapMarker;
    }

    function setPositionFromLatLongAndRadius(lat, lng, pointRadius, position) {
        lng = lng + 180;
        lng = lng > 180 ? lng - 360 : lng;

        var phi = (90 - lat) * Math.PI / 180;
        var theta = (180 - lng) * Math.PI / 180;

        position.x = pointRadius * Math.sin(phi) * Math.cos(theta);
        position.y = pointRadius * Math.cos(phi);
        position.z = pointRadius * Math.sin(phi) * Math.sin(theta);
    }

    function onDocumentMouseMove(event) {
        event.preventDefault();
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    }

    function onClick(event) {
        if (INTERSECTED) {
            $('.divInfoContainer').show();
            document.getElementById('divHotelName').innerHTML = INTERSECTED.hotel.name;
            var div = document.getElementById('divHotelDescription');
            div.innerHTML = '';
            for (var i = 0; i < INTERSECTED.hotel.description.length; i++) {
                div.innerHTML += '<p>' + INTERSECTED.hotel.description[i].text+ '</p>';
            }
        }
    }

    function render() {
        requestAnimationFrame(render);

        renderer.render(scene, camera);

        findIntersections();
    }

    function findIntersections() {
        raycaster.setFromCamera(mouse, camera);
        var intersects = raycaster.intersectObjects(hotelMeshArray);
        if(intersects.length > 0) {
            intersects[0].object.material.color.setHex(highlightColor);
            if(INTERSECTED && INTERSECTED != intersects[0].object) {
                INTERSECTED.material.color.setHex(hotelColor);
            }
            INTERSECTED = intersects[0].object;
        } else {
            if(INTERSECTED)
                INTERSECTED.material.color.setHex(hotelColor);
            INTERSECTED = null;
        }
    }

    function animate() {
        requestAnimationFrame(animate);
        controls.update();
        for (var i in renderFuncs) {
            renderFuncs[i]();
        }
    }
</script>

</body>
</html>