<!DOCTYPE html>
<html>
	<head>
		<meta charset=utf-8>
		<title>My first three.js app</title>
		<style>
			body { margin: 0; }
			canvas { width: 100%; height: 100% }
		</style>
	</head>
	<body>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/84/three.min.js"></script>
		<script src="https://threejs.org/examples/js/controls/TrackballControls.js"></script>
		 
		<script>
			// Our Javascript will go here.

			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000 );

			var renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
			
			//skapa material, färger i detta fall
			var materialCube = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
			var materialLine = new THREE.LineBasicMaterial({ color: 0xff0000 });

			//skapa geometri för linje
			var geometryLine = new THREE.Geometry();
			geometryLine.vertices.push(new THREE.Vector3(0, 0, 0));
			geometryLine.vertices.push(new THREE.Vector3(0, 0, 0));
			geometryLine.vertices.push(new THREE.Vector3(0, 0, 0));		

			//skapa objekt, kuberna får även geometri skapad
			var cube1 = new THREE.Mesh( new THREE.BoxGeometry( 1,1,1 ), materialCube );
			var cube2 = new THREE.Mesh( new THREE.BoxGeometry( 1,1,1 ), materialCube );
			var cube3 = new THREE.Mesh( new THREE.BoxGeometry( 1,1,1 ), materialCube );
			var line = new THREE.Line(geometryLine, materialLine);

			//sätt position
			cube1.position.set(-4,-2,0);
			cube2.position.set(0,0,0);
			cube3.position.set(3,1,10);
			line.geometry.vertices[0] = cube1.position;
			line.geometry.vertices[1] = cube2.position;
			line.geometry.vertices[2] = cube3.position;

			var startPoint1 = line.geometry.vertices[0];
    		var endPoint1 = line.geometry.vertices[1];

			var startPoint2 = line.geometry.vertices[1];
    		var endPoint2 = line.geometry.vertices[2];

			var animationPoints1 = createLinePoints(startPoint1, endPoint1);
			var animationPoints2 = createLinePoints(startPoint2, endPoint2);
		    var particleGeometry = new THREE.Geometry();
		    
	        var desiredIndex = animationPoints1.length;
	        var rIndex = constrain(Math.floor(desiredIndex),0,animationPoints1.length-1);
	        var particle = new THREE.Vector3();
	        var particle = animationPoints1[rIndex].clone();
	        particle.moveIndex = rIndex;
	        particle.nextIndex = rIndex + 1;
	        if(particle.nextIndex >= animationPoints1.length )
	            particle.nextIndex = 0;
	        particle.lerpN = 0;
	        particle.path = animationPoints1;
	        particleGeometry.vertices.push( particle );

			//set particle material
		    var pMaterial = new THREE.ParticleBasicMaterial({
		        color: 0x00FF00,
		        size: 1,
		        blending: THREE.AdditiveBlending,
		        transparent: true
		    });

		    var particles = new THREE.ParticleSystem( particleGeometry, pMaterial );
		    particles.sortParticles = true;
		    particles.dynamic = true;

			//camera.position.z = 5;
			camera.position.set(0,0,20);

		    //lägg till i scen
			scene.add( cube1 );
			scene.add( cube2 );
			scene.add( cube3 );
			scene.add( line );
		    scene.add( particles );

			function UpdateParticles(){
		        // var time = Date.now()
		        for( var i = 0; i < particles.geometry.vertices.length; i++ ){
		            var particle = particles.geometry.vertices[i];
		            var path = particle.path;
		            particle.lerpN += 0.05;
		            if(particle.lerpN > 1){
		                particle.lerpN = 0;
		                particle.moveIndex = particle.nextIndex;
		                particle.nextIndex++;
		                if( particle.nextIndex >= path.length ){
		                    particle.moveIndex = 0;
		                    particle.nextIndex = 1;
		                }
		            }

		            var currentPoint = path[particle.moveIndex];
		            var nextPoint = path[particle.nextIndex];


		            particle.copy( currentPoint );
		            particle.lerp( nextPoint, particle.lerpN );
		        }
		        particles.geometry.verticesNeedUpdate = true;
    		};


			function createLinePoints(startPoint, endPoint){
		        var numPoints = 10;
		        var returnPoints = [];
		        for(i=0; i <= numPoints; i ++){
		            var thisPoint = startPoint.clone().lerp(endPoint, i/numPoints);
		            returnPoints.push(thisPoint);
		        }
		        return returnPoints;
		    }

		    function constrain(v, min, max){
		        if( v < min )
		            v = min;
		        else
		        if( v > max )
		            v = max;
		        return v;
		    }

			function render() {
				//cube1.rotation.x += 0.01;
				// cube1.rotation.y += 0.05;
				// cube2.rotation.x -= 0.01;
				// cube2.rotation.y -= 0.01;
				// cube3.rotation.x += 0.1;
				// cube3.rotation.y -= 0.1;

				requestAnimationFrame( render );
				renderer.render( scene, camera );
				UpdateParticles();
			}
			render();
		</script>
	</body>
</html>